
/* JSON for XVR 
 * by Emanuele Ruffaldi
 *
 * Format:
 * object is { string : value , }
 * array  is { value , }
 * value  is string,number,"true" "false" "null", object, array
 * number is a number with optional float but no hex or octal
 * json has /* and // 
 * string has escapes: " / \ bfnrtu  u+FOURHEX
 *
 * tokens: string number [] {} , : 
 * comments
 * whitespace
 *
 * Type Conversion:
 * number <-> integer or real
 * object <-> XVR  NOT AVAILABLE => xvrarray
 * array  <-> array or optionally vector if the array contains only numbers
 * string <-> string
 * 
 */

function JSONisdigit(s)
{
	var w = asc(s[0]);
	return w => 48 && w <= 57;
}

function JSONindexOf(s, what,base)
{
	for(var i = base == Void ? 0 : base; i < len(s); i++)
		if(s[i] == what)
			return i;
	return -1;
}

function JSONsubstr(s, first, length)
{
	var ll = len(s);
	if(length == Void)
		length = ll-first;
	else if(first+length > ll)
		length = ll-first;	
	if(first == 0)
		return left(s,length);
	else if(first+length == ll)
		return right(s, length);
	else
	{
		// TODO improve
		return left(right(s, ll-first), length);
	}
}

// last is included
function JSONsubstrRange(s, first, last)
{
	var ll = len(s);
	if(last < first)
		return "";
	if(last >= ll)
		last = ll-1;
	if(first < 0)
		first = 0;
	return JSONsubstr(s, first, last-first+1);
}

/// parses and generates something
/// JSON arrays become always XVR arrays and not vectors
/// JSON objects become CXVRArray or ????
function _JSONparse(data)	
{
	var text = data[0];
	var base = data[1];
			
	var c = text[base];
	switch(c)
	{
	case "#":		
		{
			data[1]++;
			var n = _JSONparse(data);
			base = data[1];
			c = text[base++];
			if(valtype(n) != "I" || c != "[")
			{
				data[2] = false;
				return Void;
			}
			else
			{
				// numeric array with specified size
				var r = Vector(n);
				for(var i = 0; i < n; ++i)
				{
				
				}
		
				return r;
			}
		}		
	case "[":
		/// array
		{
			var r = {};
			data[1]++;
			while(text[data[1]] != "]")
			{
				var q = _JSONparse(data);
				if(!data[2])
					return Void;
				aadd(r,q);
				if(text[data[1]] == ",")
					data[1]++;
				else if(text[data[1]] == "]")
					break;
				else
				{
					OutputLN("JSON error expected comma after array value");
					data[2] = false;
					return Void;
				}					
			};
			data[1]++;
			return r;
		}
		break;
	case "{":
		/// array
		{
			var r = {};
			data[1]++;
			while(true)
			{
				var name = _JSONparse(data);
				if(!data[2] || valtype(name) != "S")
				{
					data[2] = false;
					return Void;
				}
				if(text[data[1]] != ":")
				{
					data[2] = false;
					return Void;
				}
				data[1]++;
				var value = _JSONparse(data);
				if(!data[2])
					return Void;
				aadd(r,{name,value});
				// TODO check length
				if(text[data[1]] == "}")
					break;
				else if(text[data[1]] == ",")
					data[1]++;
				else
				{
					data[1] = false;
					return Void;
				}
			};
			if(text[base] == "]")
				data[1]++;			
			return r;
		}
		break;
	case "\"":
		/// parse the string
		{
			base++;
			var ei = JSONindexOf(text, "\"",base);
			while(ei > 0 && text[ei-1] == "\\")
				ei = JSONindexOf(text, "\"",ei);
			if(ei < 0)
			{
				data[2] = false;
				return Void;
			}
			else
			{
				// unescape
				data[1] = ei+1;			
				return JSONsubstrRange(text, base, ei-1);
			}
		}
		break;
	case "t":		
		if(JSONsubstr(text,base+1,3) == "rue")
		{
			data[1] = base+4;
			return true;	
		}
		else
		{
			data[2] = false;
			return Void;
		}
	case "n":
		if(JSONsubstr(text,base+1,3) == "ull")
		{
			data[1] = base+4;
			return Void;	
		}
		else
		{
			data[2] = false;
			return Void;
		}
	case "f":
		if(JSONsubstr(text,base+1,4) == "alse")
		{
			data[1] = base+5;
			return false;	
		}
		else
		{
			data[2] = false;
			return Void;
		}
	default:
		/// number
		{
			var j = base;
			if(text[j] == "+" || text[j] == "-")
				j++;
			while(JSONisdigit(text[j]))
				j++;
			var r;
			if(text[j] == "." || text[j] == "E" || text[j] == "e")
			{											
				j++;
				if(text[j] == "+" || text[j] == "-")
					j++;
				while(JSONisdigit(text[j]))
					j++;					
				sscanf(JSONsubstrRange(text,base,j-1),"%f",&r);
			}
			else
			{
				sscanf(JSONsubstrRange(text,base,j-1),"%d",&r);
			}			
			data[1] = j;
			return r; 
		}
		break;
	}
	
	return Void;
}

function JSONparse(text)	
{
	return _JSONparse({ text, 0, true});
}

/// be careful no cyclic structures
function JSONstringify(value)
{
	switch(valtype(value))
	{
	case "I":
		return str(value);
	case "R":
		return str(value);
	case "B":
		return value == true ? "true" : "false";
	case "A":
		{
			var r = "[";
			foreach(var v in value)
			{
				r = r + JSONstringify(v) + ",";
			}
			r[len(r)-1] = "]";
			return r;
		}
	case "V":
		{
			var r = "[";
			foreach(var v in value)
			{
				r = r + str(v) + ",";
			}
			r[len(r)-1] = "]";
			return r;
		}
		break;
	case "O":
		{
		var cn = GetClassName(value);
		// TODO: when object would provide interfaces or other stuff
		if(cn == "CXVRArray")
		{
			// get entries
			value.Rewind();
			var r = "{";
			while(value.Next())
			{
				var k = value.CurrentKey;
				var v = value.CurrentValue;
				if(valtype(k) != "S")
					k = str(k);
				r = r + "\"" + k + "\":" + JSONstringify(v);					
			}		
			r[len(r)-1] = "}";
			return r;
		}
		else
		{
			// ??? 
		}
		}
		break;
	case "S":
		{
			var r = "\"";
			var n = len(value);
			for(var i = 0; i < n; ++i)
			{
				var c = value[i];
				switch(c)
				{
				case "\n": r += "\\n";break;
				case "\b": r += "\\b";break;
				case "\t": r += "\\t";break;
				case "\r": r += "\\r";break;
				case "\f": r += "\\f";break;
				case "\\": r += "\\\\"; break;
				default:
					// TODO
					{
						var a = asc(c);
						if(a <= 0x1F)
							c = "?";
						r += c;
					}
				}
			}
			r += "\"";
			return r;
		}
		break;
	default:
		break;
	}
	return "null";
}

/// the difference is that strings are preserved
function XVRstringify(value)
{
	switch(valtype(value))
	{
	case "I":
		return str(value);
	case "R":
		return str(value);
	case "B":
		return value == true ? "true" : "false";
	case "A":
		{
			var r = "[";
			foreach(var v in value)
			{
				r = r + XVRstringify(v) + ",";
			}
			r[len(r)-1] = "]";
			return r;
		}
	case "V":
		{
			var r = "#" + str(len(value)) + "[";
			foreach(var v in value)
			{
				r = r + str(v) + ",";
			}
			r[len(r)-1] = "]";
			return r;
		}
		break;
	case "S":
		{
			var r = "\"";
			var n = len(value);
			for(var i = 0; i < n; ++i)
			{
				var c = value[i];
				switch(c)
				{
				case "\n": r += "\\n";break;
				case "\b": r += "\\b";break;
				case "\t": r += "\\t";break;
				case "\r": r += "\\r";break;
				case "\f": r += "\\f";break;
				case "\\": r += "\\\\"; break;
				default:
					// TODO
					{
						var a = asc(c);
						if(a <= 0x1F)
							c = "?";
						r += c;
					}
				}
			}
			r += "\"";
			return r;
		}
		break;
	case "O":
		{
		var cn = GetClassName(value);
		// TODO: when object would provide interfaces or other stuff
		if(cn == "CXVRArray")
		{
			// get entries
			value.Rewind();
			var r = "{";
			while(value.Next())
			{
				var k = value.CurrentKey;
				var v = value.CurrentValue;
				if(valtype(k) != "S")
					k = str(k);
				r = r + "\"" + k + "\":" + XVRstringify(v);					
			}		
			r[len(r)-1] = "}";
			return r;
		}
		else
		{
			// ??? 
		}
		}
		break;
	default:
		break;
	}
	return "null";
}